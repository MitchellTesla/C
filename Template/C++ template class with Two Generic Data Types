A template class can have more than one generic data type.

Simply declare all the data types required by the class in a comma-separated list within the template specification.

For example, the following program creates a class that uses two generic data types:

Copy
/* This example uses two generic data types in a
class definition.
*/
#include <iostream>
using namespace std;


template <class Type1, class Type2> class myclass
{
   Type1 i;
   Type2 j;
public:
  myclass(Type1 a, Type2 b) { i = a; j = b; }
  void show() { cout << i << ' ' << j << '\n'; }
};

int main()
{
  myclass<int, double> ob1(10, 0.23);
  myclass<char, char *> ob2('X', "This is a test");

  ob1.show(); // show int, double
  ob2.show(); // show char, char *

  return 0;
}
This program produces the following output:


The program declares two types of objects.

ob1 uses int and double data. ob2 uses a character and a character pointer.

For both cases, the compiler automatically generates the appropriate data and functions to accommodate the way the objects are created.
