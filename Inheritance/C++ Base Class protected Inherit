In addition to specifying protected status for members of a class, the keyword protected can also be used to inherit a base class.

When a base class is inherited as protected, all public and protected members of the base class become protected members of the derived class.

Here is an example:

Copy
// Demonstrate inheriting a protected base class.
#include <iostream>
using namespace std;

class base {
   int i;
protected:
   int j;
public:
   int k;
  void seti(int a) { i = a; }
   int geti() { return i; }
};

// Inherit base as protected.
class derived : protected base {
public:
  void setj(int a) { j = a; } // j is protected here
  void setk(int a) { k = a; } // k is also protected
   int getj() { return j; }
   int getk() { return k; }
};

int main()
{
   derived ob;

   //  ob.seti(10); // illegal because seti() is
                    // a protected member of derived, which makes it
                    // inaccessible outside of derived.

   //  cout << ob.geti(); // illegal -- geti() is protected
   //  ob.k = 10;         // illegal because k is protected

   // these next statements are OK
   ob.setk(10);
   cout << ob.getk() << ' ';
   ob.setj(12);
   cout << ob.getj() << ' ';

   return 0;
}
Output:


k, j, seti(), and geti() in base become protected members of derived.

This means that they cannot be accessed by code outside of derived.

Thus, inside main(), references to these members through ob are illegal.
