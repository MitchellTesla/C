An element of ambiguity can be introduced into a C++ program when multiple base classes are inherited.

Consider this incorrect program:

Copy
// This program contains an error and will not compile.
#include <iostream>
using namespace std;

class base {
public:
  int i;
};

// My_Sub_Class1 inherits base.
class My_Sub_Class1 :  public base {
public:
  int j;
};

// My_Sub_Class2 inherits base.
class My_Sub_Class2 : public base {
public:
  int k;
};

/* My_Sub_Class3 inherits both My_Sub_Class1 and My_Sub_Class2.
   This means that there are two copies of base
   in My_Sub_Class3! */
class My_Sub_Class3 : public My_Sub_Class1, public My_Sub_Class2 {
public:
  int sum;
};

int main()
{
  My_Sub_Class3 ob;

  ob.i = 10;  // this is ambiguous; which i???
  ob.j = 20;
  ob.k = 30;

  // i ambiguous here, too
  ob.sum = ob.i + ob.j + ob.k;

  // also ambiguous, which i?
  cout << ob.i << " ";

  cout << ob.j << " " << ob.k << " ";
  cout << ob.sum;

  return 0;
}
Both My_Sub_Class1 and My_Sub_Class2 inherit base.

My_Sub_Class3 inherits both My_Sub_Class1 and My_Sub_Class2.

As a result, there are two copies of base present in an object of type My_Sub_Class3, so that in an expression like.

Copy
ob.i = 20;
which i is being referred to? The one in My_Sub_Class1 or the one in My_Sub_Class2? Since there are two copies of base present in object ob, there are two ob.i.

There are two ways to remedy the preceding program.

The first is to apply the scope resolution operator to manually select one i.

For example, the following version of the program will compile and run as expected:

Copy
// This program uses explicit scope resolution to select i.
#include <iostream>
using namespace std;

class base {
public:
   int i;
};

// My_Sub_Class1 inherits base.
class My_Sub_Class1 :  public base {
public:
   int j;
};

// My_Sub_Class2 inherits base.
class My_Sub_Class2 : public base {
public:
   int k;
};

/* My_Sub_Class3 inherits both My_Sub_Class1 and My_Sub_Class2.
    This means that there are two copies of base
    in My_Sub_Class3! */
class My_Sub_Class3 : public My_Sub_Class1, public My_Sub_Class2 {
public:
   int sum;
};

int main()
{
  My_Sub_Class3 ob;

   ob.My_Sub_Class1::i = 10;  // scope resolved, use My_Sub_Class1's i
   ob.j = 20;
   ob.k = 30;

   // scope resolved
   ob.sum = ob.My_Sub_Class1::i + ob.j + ob.k;

   // also resolved here
   cout << ob.My_Sub_Class1::i << " ";

   cout << ob.j << " " << ob.k << " ";
   cout << ob.sum;

  return 0;
}
Output:


By applying the ::, the program manually selects My_Sub_Class1's version of base.

virtual base classes
When two or more objects are derived from a common base class, you can prevent multiple copies of the base class from being present in an object derived from those classes, by declaring the base class as virtual when it is inherited.

To do this, you precede the name of the base class with the keyword virtual when it is inherited.

To illustrate this process, here is another version of the sample program.

This time, My_Sub_Class3 contains only one copy of base.

Copy
// This program uses virtual base classes.
#include <iostream>
using namespace std;

class base {
public:
   int i;
};


// My_Sub_Class1 inherits base as virtual.
class My_Sub_Class1 : virtual public base {
public:
   int j;
};

// My_Sub_Class2 inherits base as virtual.
class My_Sub_Class2 : virtual public base {
public:
   int k;
};

/* My_Sub_Class3 inherits both My_Sub_Class1 and My_Sub_Class2.
    This time, there is only one copy of base class. */
class My_Sub_Class3 : public My_Sub_Class1, public My_Sub_Class2 {
public:
   int sum;
};

int main()
{
  My_Sub_Class3 ob;

  ob.i = 10;  // now unambiguous
  ob.j = 20;
  ob.k = 30;

   // unambiguous
  ob.sum = ob.i + ob.j + ob.k;

  // unambiguous
  cout << ob.i << " ";

  cout << ob.j << " " << ob.k << " ";
  cout << ob.sum;

  return 0;
}
Output:


The keyword virtual precedes the rest of the inherited class' specification.

Now that both My_Sub_Class1 and My_Sub_Class2 have inherited base as virtual, any multiple inheritance involving them will cause only one copy of base to be present.

Therefore, in My_Sub_Class3 there is only one copy of base, and ob.i = 10 is perfectly valid and unambiguous.

Even though both My_Sub_Class1 and My_Sub_Class2 specify base as virtual, base is still present in an object of either type.

For example, the following sequence is perfectly valid:

Copy
// Define a class of type My_Sub_Class1.
My_Sub_Class1 myclass;

myclass.i = 88;
The difference between a normal base class and a virtual one becomes evident only when an object inherits the base class more than once.

If the base class has been declared as virtual, then only one instance of it will be present in the inheriting object.

Otherwise, multiple copies will be found.
