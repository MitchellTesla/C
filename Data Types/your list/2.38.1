#include<conio.h>
#include<stdarg.h>
#include<iostream.h>
const int No=5;

class List
{
private:
   int n;
   int *array;
public:
   List(int i)
   {
     array=new int[i];
   n=i;
  }
  ~List()
  {
    delete array;
  }
  void Init(int al,...);
  void Show();
  void Add(List &v1,List &v2);
  int Inner(List &v2);
  void Scale(int x);
};
void List::Init(int al,...)
{
    va_list argp;
  va_start(argp,al);
  array[0]=al;
  for(int i=1;i<n;i++)
     array[i]=va_arg(argp,int);
  va_end(argp);
}
void List::Show()
{
   cout<<"(";
   for(int i=0;i<n;i++)
     cout<<array[i]<<",";
   cout<<")"<<endl;
}
void List:: Add(List &v1,List &v2)
{
   for(int i=0;i<n;i++)
      array[i]=v1.array[i]+v2.array[i];
}
int List::Inner(List &v2)
{
   int result=0;
   for(int i=0;i<n;i++)
      result+=array[i]*v2.array[i];
   return(result);
}
void List::Scale(int x)
{
   for(int i=0;i<n;i++)
      array[i]*=x;
}
main()
{
     List vect1(No),vect2(No),vect3(No);
     int InnerProduct;
   vect1.Init(2,4,6,8,10);
   vect2.Init(1,3,5,7,9);
   int m=4;
   cout<<"vect1=";
   vect1.Show();
   cout<<"vect2=";
   vect2.Show();
   vect3.Add(vect1,vect2);
   cout<<"vect3=vect1+vect2=";
   vect3.Show();
   InnerProduct=vect1.Inner(vect2);

   cout<<"Inner product of vect1&vect2 is:"<<InnerProduct<<endl;
   vect3.Scale(m);
   cout<<"vect3*"<<m<<"=";
   vect3.Show();
   return 0;
}
